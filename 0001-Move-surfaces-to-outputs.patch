From 23c447b5bcc7767bd06176d8ed1dfa2c66eb588d Mon Sep 17 00:00:00 2001
From: Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
Date: Wed, 31 Dec 2014 11:35:53 +0100
Subject: [PATCH 1/3] Move surfaces to outputs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Moving surfaces to belong to a specific output.
Surfaces can be viewed on a different output anyway.

Change-Id: I9ef76300f85190d84b83431374e76e581786e4e7
Done-with: JÃ¸rgen Lind <jorgen.lind@theqtcompany.com>
---
 .../compositor_api/qwaylandcompositor.cpp          | 75 ++++++++++++++--------
 src/compositor/compositor_api/qwaylandcompositor.h | 12 ++--
 src/compositor/compositor_api/qwaylandoutput.cpp   | 30 +++++++++
 src/compositor/compositor_api/qwaylandoutput.h     | 11 ++++
 .../compositor_api/qwaylandquickcompositor.cpp     |  3 +-
 .../compositor_api/qwaylandquicksurface.cpp        | 18 ++++--
 .../compositor_api/qwaylandquicksurface.h          |  3 +
 src/compositor/compositor_api/qwaylandsurface.cpp  |  5 ++
 src/compositor/compositor_api/qwaylandsurface.h    | 16 +++++
 src/compositor/wayland_wrapper/qwlcompositor.cpp   | 24 +------
 src/compositor/wayland_wrapper/qwlcompositor_p.h   |  5 --
 src/compositor/wayland_wrapper/qwloutput.cpp       | 45 +++++++++++++
 src/compositor/wayland_wrapper/qwloutput_p.h       | 10 +++
 src/compositor/wayland_wrapper/qwlsurface.cpp      | 39 ++++++++++-
 src/compositor/wayland_wrapper/qwlsurface_p.h      |  2 +
 15 files changed, 233 insertions(+), 65 deletions(-)

diff --git a/src/compositor/compositor_api/qwaylandcompositor.cpp b/src/compositor/compositor_api/qwaylandcompositor.cpp
index 1839832..93a9cc6 100644
--- a/src/compositor/compositor_api/qwaylandcompositor.cpp
+++ b/src/compositor/compositor_api/qwaylandcompositor.cpp
@@ -98,17 +98,6 @@ struct wl_display *QWaylandCompositor::waylandDisplay() const
     return m_compositor->wl_display();
 }
 
-void QWaylandCompositor::sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces)
-{
-    m_compositor->sendFrameCallbacks(visibleSurfaces);
-}
-
-void QWaylandCompositor::frameStarted()
-{
-    for (QtWayland::Surface *surf: m_compositor->surfaces())
-        surf->frameStarted();
-}
-
 void QWaylandCompositor::destroyClientForSurface(QWaylandSurface *surface)
 {
     destroyClient(surface->client());
@@ -119,29 +108,54 @@ void QWaylandCompositor::destroyClient(QWaylandClient *client)
     m_compositor->destroyClient(client);
 }
 
-QList<QWaylandSurface *> QWaylandCompositor::surfacesForClient(QWaylandClient* client) const
+#if QT_DEPRECATED_SINCE(5, 5)
+void QWaylandCompositor::frameStarted()
 {
-    QList<QtWayland::Surface *> surfaces = m_compositor->surfaces();
+    Q_FOREACH (QWaylandOutput *output, outputs())
+        output->frameStarted();
+}
 
-    QList<QWaylandSurface *> result;
+typedef QList<QWaylandSurface *> QWaylandSurfaceList;
+typedef std::pair<QWaylandOutput *, QWaylandSurfaceList> QWaylandOutputSurfaceListPair;
 
-    for (int i = 0; i < surfaces.count(); ++i) {
-        if (surfaces.at(i)->waylandSurface()->client() == client) {
-            result.append(surfaces.at(i)->waylandSurface());
-        }
+static QList<QWaylandSurface *> &getSurfaceListForOutput(QList<QWaylandOutputSurfaceListPair> &list, QWaylandOutput *output)
+{
+    for (int i = 0; i < list.size(); i++) {
+        if (list.at(i).first == output)
+            return list[i].second;
     }
 
-    return result;
+    list.append(std::make_pair(output, QList<QWaylandSurface *>()));
+    return list.last().second;
+}
+
+void QWaylandCompositor::sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces)
+{
+    QList<QWaylandOutputSurfaceListPair> visibleOutputSurfaces;
+    Q_FOREACH (QWaylandSurface *surface, visibleSurfaces) {
+        getSurfaceListForOutput(visibleOutputSurfaces, surface->output()).append(surface);
+    }
+
+    for (int i = 0; i < visibleOutputSurfaces.size(); i++)
+        visibleOutputSurfaces.at(i).first->sendFrameCallbacks(visibleOutputSurfaces.at(i).second);
+}
+
+QList<QWaylandSurface *> QWaylandCompositor::surfacesForClient(QWaylandClient* client) const
+{
+    QList<QWaylandSurface *> surfaces;
+    Q_FOREACH (QWaylandOutput *output, outputs())
+        surfaces.append(output->surfacesForClient(client));
+    return surfaces;
 }
 
 QList<QWaylandSurface *> QWaylandCompositor::surfaces() const
 {
-    QList<QtWayland::Surface *> surfaces = m_compositor->surfaces();
     QList<QWaylandSurface *> surfs;
-    foreach (QtWayland::Surface *s, surfaces)
-        surfs << s->waylandSurface();
+    Q_FOREACH (QWaylandOutput *output, outputs())
+        surfs.append(output->surfaces());
     return surfs;
 }
+#endif
 
 QList<QWaylandOutput *> QWaylandCompositor::outputs() const
 {
@@ -175,13 +189,20 @@ void QWaylandCompositor::surfaceAboutToBeDestroyed(QWaylandSurface *surface)
 
 QWaylandSurfaceView *QWaylandCompositor::pickView(const QPointF &globalPosition) const
 {
-    Q_FOREACH (QtWayland::Surface *surface, m_compositor->surfaces()) {
-        foreach (QWaylandSurfaceView *view, surface->waylandSurface()->views())
-            if (QRectF(view->pos(), surface->size()).contains(globalPosition))
-                return view;
+    Q_FOREACH (QWaylandOutput *output, outputs()) {
+        // Skip coordinates not in output
+        if (!QRectF(output->geometry()).contains(globalPosition))
+            continue;
+
+        Q_FOREACH (QWaylandSurface *surface, output->surfaces()) {
+            Q_FOREACH (QWaylandSurfaceView *view, surface->views()) {
+                if (QRectF(view->pos(), surface->size()).contains(globalPosition))
+                    return view;
+            }
+        }
     }
 
-    return 0;
+    return Q_NULLPTR;
 }
 
 QPointF QWaylandCompositor::mapToView(QWaylandSurfaceView *surface, const QPointF &globalPosition) const
diff --git a/src/compositor/compositor_api/qwaylandcompositor.h b/src/compositor/compositor_api/qwaylandcompositor.h
index c1c7855..1e482eb 100644
--- a/src/compositor/compositor_api/qwaylandcompositor.h
+++ b/src/compositor/compositor_api/qwaylandcompositor.h
@@ -94,14 +94,16 @@ public:
     void addDefaultShell();
     ::wl_display *waylandDisplay() const;
 
-    void frameStarted();
-    void sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces);
-
     void destroyClientForSurface(QWaylandSurface *surface);
     void destroyClient(QWaylandClient *client);
 
-    QList<QWaylandSurface *> surfacesForClient(QWaylandClient* client) const;
-    QList<QWaylandSurface *> surfaces() const;
+#if QT_DEPRECATED_SINCE(5, 5)
+    QT_DEPRECATED void frameStarted();
+    QT_DEPRECATED void sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces);
+
+    QT_DEPRECATED QList<QWaylandSurface *> surfacesForClient(QWaylandClient* client) const;
+    QT_DEPRECATED QList<QWaylandSurface *> surfaces() const;
+#endif
 
     QList<QWaylandOutput *> outputs() const;
     QWaylandOutput *output(QWindow *window);
diff --git a/src/compositor/compositor_api/qwaylandoutput.cpp b/src/compositor/compositor_api/qwaylandoutput.cpp
index ab2ee52..a4ed354 100644
--- a/src/compositor/compositor_api/qwaylandoutput.cpp
+++ b/src/compositor/compositor_api/qwaylandoutput.cpp
@@ -244,3 +244,33 @@ QtWayland::Output *QWaylandOutput::handle()
 {
     return d_ptr;
 }
+
+void QWaylandOutput::frameStarted()
+{
+    d_ptr->frameStarted();
+}
+
+void QWaylandOutput::sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces)
+{
+    d_ptr->sendFrameCallbacks(visibleSurfaces);
+}
+
+QList<QWaylandSurface *> QWaylandOutput::surfaces() const
+{
+    return d_ptr->surfaces();
+}
+
+QList<QWaylandSurface *> QWaylandOutput::surfacesForClient(QWaylandClient *client) const
+{
+    return d_ptr->surfacesForClient(client);
+}
+
+void QWaylandOutput::addSurface(QWaylandSurface *surface)
+{
+    d_ptr->addSurface(surface);
+}
+
+void QWaylandOutput::removeSurface(QWaylandSurface *surface)
+{
+    d_ptr->removeSurface(surface);
+}
diff --git a/src/compositor/compositor_api/qwaylandoutput.h b/src/compositor/compositor_api/qwaylandoutput.h
index 5c31be9..abf217f 100644
--- a/src/compositor/compositor_api/qwaylandoutput.h
+++ b/src/compositor/compositor_api/qwaylandoutput.h
@@ -54,6 +54,8 @@ struct wl_resource;
 
 class QWaylandCompositor;
 class QWindow;
+class QWaylandSurface;
+class QWaylandClient;
 
 namespace QtWayland {
     class Output;
@@ -143,6 +145,15 @@ public:
 
     QtWayland::Output *handle();
 
+    void frameStarted();
+    void sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces);
+
+    QList<QWaylandSurface *> surfaces() const;
+    QList<QWaylandSurface *> surfacesForClient(QWaylandClient *client) const;
+
+    void addSurface(QWaylandSurface *surface);
+    void removeSurface(QWaylandSurface *surface);
+
 Q_SIGNALS:
     void positionChanged();
     void geometryChanged();
diff --git a/src/compositor/compositor_api/qwaylandquickcompositor.cpp b/src/compositor/compositor_api/qwaylandquickcompositor.cpp
index bd053a9..902954c 100644
--- a/src/compositor/compositor_api/qwaylandquickcompositor.cpp
+++ b/src/compositor/compositor_api/qwaylandquickcompositor.cpp
@@ -40,6 +40,7 @@
 ****************************************************************************/
 
 #include <QtCompositor/private/qwlcompositor_p.h>
+#include <QtCompositor/private/qwlsurface_p.h>
 
 #include "qwaylandclient.h"
 #include "qwaylandquickcompositor.h"
@@ -61,7 +62,7 @@ public:
     void compositor_create_surface(Resource *resource, uint32_t id) Q_DECL_OVERRIDE
     {
         QWaylandQuickSurface *surface = new QWaylandQuickSurface(resource->client(), id, wl_resource_get_version(resource->handle), static_cast<QWaylandQuickCompositor *>(m_qt_compositor));
-        m_surfaces << surface->handle();
+        primaryOutput()->addSurface(surface);
         //BUG: This may not be an on-screen window surface though
         m_qt_compositor->surfaceCreated(surface);
     }
diff --git a/src/compositor/compositor_api/qwaylandquicksurface.cpp b/src/compositor/compositor_api/qwaylandquicksurface.cpp
index 83b37da..4edb968 100644
--- a/src/compositor/compositor_api/qwaylandquicksurface.cpp
+++ b/src/compositor/compositor_api/qwaylandquicksurface.cpp
@@ -167,12 +167,8 @@ QWaylandQuickSurface::QWaylandQuickSurface(wl_client *client, quint32 id, int ve
     d->buffer->surface = this;
     setBufferAttacher(d->buffer);
 
-    QQuickWindow *window = static_cast<QQuickWindow *>(output()->window());
-    connect(window, &QQuickWindow::beforeSynchronizing, this, &QWaylandQuickSurface::updateTexture, Qt::DirectConnection);
-    connect(window, &QQuickWindow::sceneGraphInvalidated, this, &QWaylandQuickSurface::invalidateTexture, Qt::DirectConnection);
     connect(this, &QWaylandSurface::windowPropertyChanged, d->windowPropertyMap, &QQmlPropertyMap::insert);
     connect(d->windowPropertyMap, &QQmlPropertyMap::valueChanged, this, &QWaylandSurface::setWindowProperty);
-
 }
 
 QWaylandQuickSurface::~QWaylandQuickSurface()
@@ -208,6 +204,20 @@ QObject *QWaylandQuickSurface::windowPropertyMap() const
     return d->windowPropertyMap;
 }
 
+void QWaylandQuickSurface::outputChangedEvent(QWaylandOutputChangedEvent *event)
+{
+    if (event->oldOutput) {
+        QQuickWindow *oldWindow = static_cast<QQuickWindow *>(event->oldOutput->window());
+        disconnect(oldWindow, &QQuickWindow::beforeSynchronizing, this, &QWaylandQuickSurface::updateTexture);
+        disconnect(oldWindow, &QQuickWindow::sceneGraphInvalidated, this, &QWaylandQuickSurface::invalidateTexture);
+    }
+
+    if (event->newOutput) {
+        QQuickWindow *window = static_cast<QQuickWindow *>(event->newOutput->window());
+        connect(window, &QQuickWindow::beforeSynchronizing, this, &QWaylandQuickSurface::updateTexture, Qt::DirectConnection);
+        connect(window, &QQuickWindow::sceneGraphInvalidated, this, &QWaylandQuickSurface::invalidateTexture, Qt::DirectConnection);
+    }
+}
 
 void QWaylandQuickSurface::updateTexture()
 {
diff --git a/src/compositor/compositor_api/qwaylandquicksurface.h b/src/compositor/compositor_api/qwaylandquicksurface.h
index d65a982..9ac3b66 100644
--- a/src/compositor/compositor_api/qwaylandquicksurface.h
+++ b/src/compositor/compositor_api/qwaylandquicksurface.h
@@ -75,6 +75,9 @@ public:
 
     QObject *windowPropertyMap() const;
 
+protected:
+    void outputChangedEvent(QWaylandOutputChangedEvent *event) Q_DECL_OVERRIDE;
+
 Q_SIGNALS:
     void useTextureAlphaChanged();
     void clientRenderingEnabledChanged();
diff --git a/src/compositor/compositor_api/qwaylandsurface.cpp b/src/compositor/compositor_api/qwaylandsurface.cpp
index b504d2f..17cfce0 100644
--- a/src/compositor/compositor_api/qwaylandsurface.cpp
+++ b/src/compositor/compositor_api/qwaylandsurface.cpp
@@ -266,6 +266,11 @@ void QWaylandSurface::setVisibility(QWindow::Visibility v)
     emit visibilityChanged();
 }
 
+void QWaylandSurface::outputChangedEvent(QWaylandOutputChangedEvent *event)
+{
+    Q_UNUSED(event);
+}
+
 bool QWaylandSurface::sendInterfaceOp(QWaylandSurfaceOp &op)
 {
     Q_D(QWaylandSurface);
diff --git a/src/compositor/compositor_api/qwaylandsurface.h b/src/compositor/compositor_api/qwaylandsurface.h
index 1294d4f..d4ddfc5 100644
--- a/src/compositor/compositor_api/qwaylandsurface.h
+++ b/src/compositor/compositor_api/qwaylandsurface.h
@@ -81,6 +81,19 @@ protected:
     friend class QtWayland::Surface;
 };
 
+class QWaylandOutputChangedEvent
+{
+public:
+    QWaylandOutputChangedEvent(QWaylandOutput *oldOutput, QWaylandOutput *newOutput)
+        : oldOutput(oldOutput)
+        , newOutput(newOutput)
+    {
+    }
+
+    QWaylandOutput *oldOutput;
+    QWaylandOutput *newOutput;
+};
+
 class Q_COMPOSITOR_EXPORT QWaylandSurface : public QObject
 {
     Q_OBJECT
@@ -198,6 +211,8 @@ public slots:
 protected:
     QWaylandSurface(QWaylandSurfacePrivate *dptr);
 
+    virtual void outputChangedEvent(QWaylandOutputChangedEvent *event);
+
 Q_SIGNALS:
     void mapped();
     void unmapped();
@@ -223,6 +238,7 @@ Q_SIGNALS:
 
     friend class QWaylandSurfaceView;
     friend class QWaylandSurfaceInterface;
+    friend class QtWayland::Surface;
 };
 
 QT_END_NAMESPACE
diff --git a/src/compositor/wayland_wrapper/qwlcompositor.cpp b/src/compositor/wayland_wrapper/qwlcompositor.cpp
index aa772d9..3f1a7ba 100644
--- a/src/compositor/wayland_wrapper/qwlcompositor.cpp
+++ b/src/compositor/wayland_wrapper/qwlcompositor.cpp
@@ -198,14 +198,6 @@ Compositor::~Compositor()
     delete m_display;
 }
 
-void Compositor::sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces)
-{
-    foreach (QWaylandSurface *surface, visibleSurfaces) {
-        surface->handle()->sendFrameCallback();
-    }
-    wl_display_flush_clients(m_display->handle());
-}
-
 uint Compositor::currentTimeMsecs() const
 {
     return m_timer.elapsed();
@@ -272,7 +264,7 @@ void Compositor::processWaylandEvents()
 
 void Compositor::destroySurface(Surface *surface)
 {
-    m_surfaces.removeOne(surface);
+    surface->removeFromOutput();
 
     waylandCompositor()->surfaceAboutToBeDestroyed(surface->waylandSurface());
 
@@ -299,7 +291,7 @@ void Compositor::cleanupGraphicsResources()
 void Compositor::compositor_create_surface(Resource *resource, uint32_t id)
 {
     QWaylandSurface *surface = new QWaylandSurface(resource->client(), id, resource->version(), m_qt_compositor);
-    m_surfaces << surface->handle();
+    primaryOutput()->addSurface(surface);
     //BUG: This may not be an on-screen window surface though
     m_qt_compositor->surfaceCreated(surface);
 }
@@ -405,18 +397,6 @@ InputDevice* Compositor::defaultInputDevice()
     return m_inputDevices.last()->handle();
 }
 
-QList<QtWayland::Surface *> Compositor::surfacesForClient(wl_client *client)
-{
-    QList<QtWayland::Surface *> ret;
-
-    for (int i=0; i < m_surfaces.count(); ++i) {
-        if (m_surfaces.at(i)->resource()->client() == client) {
-            ret.append(m_surfaces.at(i));
-        }
-    }
-    return ret;
-}
-
 void Compositor::configureTouchExtension(int flags)
 {
     if (m_touchExtension)
diff --git a/src/compositor/wayland_wrapper/qwlcompositor_p.h b/src/compositor/wayland_wrapper/qwlcompositor_p.h
index 85f020d..f67d39b 100644
--- a/src/compositor/wayland_wrapper/qwlcompositor_p.h
+++ b/src/compositor/wayland_wrapper/qwlcompositor_p.h
@@ -94,8 +94,6 @@ public:
     ~Compositor();
 
     void init();
-    void sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces);
-    void frameFinished(Surface *surface = 0);
 
     InputDevice *defaultInputDevice();
 
@@ -126,8 +124,6 @@ public:
     void initializeDefaultInputDevice();
     void initializeWindowManagerProtocol();
 
-    QList<Surface*> surfaces() const { return m_surfaces; }
-    QList<Surface*> surfacesForClient(wl_client* client);
     QWaylandCompositor *waylandCompositor() const { return m_qt_compositor; }
 
     struct wl_display *wl_display() const { return m_display->handle(); }
@@ -193,7 +189,6 @@ protected:
     DataDeviceManager *m_data_device_manager;
 
     QElapsedTimer m_timer;
-    QList<Surface *> m_surfaces;
     QSet<QWaylandSurface *> m_destroyed_surfaces;
 
     /* Render state */
diff --git a/src/compositor/wayland_wrapper/qwloutput.cpp b/src/compositor/wayland_wrapper/qwloutput.cpp
index 1659a63..da7e0a9 100644
--- a/src/compositor/wayland_wrapper/qwloutput.cpp
+++ b/src/compositor/wayland_wrapper/qwloutput.cpp
@@ -43,9 +43,12 @@
 
 #include "qwlcompositor_p.h"
 #include "qwlextendedoutput_p.h"
+#include "qwlsurface_p.h"
 
 #include <QtGui/QWindow>
 #include <QRect>
+#include <QtCompositor/QWaylandSurface>
+#include <QtCompositor/QWaylandOutput>
 
 QT_BEGIN_NAMESPACE
 
@@ -246,6 +249,48 @@ OutputResource *Output::outputForClient(wl_client *client) const
     return static_cast<OutputResource *>(resourceMap().value(client));
 }
 
+void Output::frameStarted()
+{
+    Q_FOREACH (QWaylandSurface *surface, m_surfaces)
+        surface->handle()->frameStarted();
+}
+
+void Output::sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces)
+{
+    Q_FOREACH (QWaylandSurface *surface, visibleSurfaces)
+        surface->handle()->sendFrameCallback();
+    wl_display_flush_clients(m_compositor->wl_display());
+}
+
+QList<QWaylandSurface *> Output::surfacesForClient(QWaylandClient *client) const
+{
+    QList<QWaylandSurface *> result;
+
+    Q_FOREACH (QWaylandSurface *surface, m_surfaces) {
+        if (surface->client() == client)
+            result.append(result);
+    }
+
+    return result;
+}
+
+void Output::addSurface(QWaylandSurface *surface)
+{
+    if (surface->output() == waylandOutput())
+        return;
+    if (surface->output())
+        surface->output()->handle()->removeSurface(surface);
+
+    surface->handle()->setOutput(this);
+    m_surfaces.append(surface);
+}
+
+void Output::removeSurface(QWaylandSurface *surface)
+{
+    m_surfaces.removeOne(surface);
+    surface->handle()->setOutput(Q_NULLPTR);
+}
+
 void Output::sendGeometryInfo()
 {
     Q_FOREACH (Resource *resource, resourceMap().values()) {
diff --git a/src/compositor/wayland_wrapper/qwloutput_p.h b/src/compositor/wayland_wrapper/qwloutput_p.h
index 027cc55..9247b47 100644
--- a/src/compositor/wayland_wrapper/qwloutput_p.h
+++ b/src/compositor/wayland_wrapper/qwloutput_p.h
@@ -110,6 +110,15 @@ public:
 
     QWaylandOutput *waylandOutput() const { return m_output; }
 
+    void frameStarted();
+    void sendFrameCallbacks(QList<QWaylandSurface *> visibleSurfaces);
+
+    QList<QWaylandSurface *> surfaces() const { return m_surfaces; }
+    QList<QWaylandSurface *> surfacesForClient(QWaylandClient *client) const;
+
+    void addSurface(QWaylandSurface *surface);
+    void removeSurface(QWaylandSurface *surface);
+
     void output_bind_resource(Resource *resource) Q_DECL_OVERRIDE;
     Resource *output_allocate() Q_DECL_OVERRIDE { return new OutputResource; }
 
@@ -128,6 +137,7 @@ private:
     QWaylandOutput::Subpixel m_subpixel;
     QWaylandOutput::Transform m_transform;
     int m_scaleFactor;
+    QList<QWaylandSurface *> m_surfaces;
 
     void sendGeometryInfo();
 };
diff --git a/src/compositor/wayland_wrapper/qwlsurface.cpp b/src/compositor/wayland_wrapper/qwlsurface.cpp
index a24aa7e..4333243 100644
--- a/src/compositor/wayland_wrapper/qwlsurface.cpp
+++ b/src/compositor/wayland_wrapper/qwlsurface.cpp
@@ -114,7 +114,7 @@ Surface::Surface(struct wl_client *client, uint32_t id, int version, QWaylandCom
     : QtWaylandServer::wl_surface(client, id, version)
     , m_compositor(compositor->handle())
     , m_waylandSurface(surface)
-    , m_output(m_compositor->primaryOutput()->handle())
+    , m_output(0)
     , m_buffer(0)
     , m_surfaceMapped(false)
     , m_attacher(0)
@@ -283,6 +283,43 @@ Output *Surface::output() const
     return m_output;
 }
 
+void Surface::setOutput(Output *output)
+{
+    if (m_output == output)
+        return;
+
+    QWaylandOutput *oldOutput = m_output ? m_output->waylandOutput() : 0;
+    m_output = output;
+
+    QWaylandOutputChangedEvent event(oldOutput, m_output ? m_output->waylandOutput() : 0);
+    // TODO: Consider doing something like this:
+    //QCoreApplication::sendEvent(waylandSurface(), &event);
+    waylandSurface()->outputChangedEvent(&event);
+
+    // Send surface enter event
+    Q_FOREACH (Resource *resource, resourceMap().values()) {
+        QList<Output::Resource *> outputs = m_output->resourceMap().values();
+        for (int i = 0; i < outputs.size(); i++)
+            send_enter(resource->handle, outputs.at(i)->handle);
+    }
+}
+
+void Surface::removeFromOutput()
+{
+    if (!m_output)
+        return;
+
+    // Remove surface
+    m_output->removeSurface(this->waylandSurface());
+
+    // Send surface leave event
+    Q_FOREACH (Resource *resource, resourceMap().values()) {
+        QList<Output::Resource *> outputs = m_output->resourceMap().values();
+        for (int i = 0; i < outputs.size(); i++)
+            send_leave(resource->handle, outputs.at(i)->handle);
+    }
+}
+
 /*!
  * Sets the backbuffer for this surface. The back buffer is not yet on
  * screen and will become live during the next swapBuffers().
diff --git a/src/compositor/wayland_wrapper/qwlsurface_p.h b/src/compositor/wayland_wrapper/qwlsurface_p.h
index 07eb358..880114f 100644
--- a/src/compositor/wayland_wrapper/qwlsurface_p.h
+++ b/src/compositor/wayland_wrapper/qwlsurface_p.h
@@ -114,6 +114,8 @@ public:
     Compositor *compositor() const;
 
     Output *output() const;
+    void setOutput(Output *output);
+    void removeFromOutput();
 
     QString className() const { return m_className; }
     void setClassName(const QString &className);
-- 
1.9.3

